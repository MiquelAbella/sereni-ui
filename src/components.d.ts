/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PositionEnum } from "./components/sereni-tooltip/entities";
export { PositionEnum } from "./components/sereni-tooltip/entities";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SereniButton {
    }
    interface SereniTooltip {
        "arrow": boolean;
        "position": PositionEnum;
        "tooltipBgColor": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-bg-color"?: string;
        "tooltipText": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-text"?: string;
        "tooltipTextColor": string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-text-color"?: string;
    }
}
export interface SereniButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSereniButtonElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSereniButtonElementEventMap {
        "sereniButtonClick": null;
    }
    interface HTMLSereniButtonElement extends Components.SereniButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSereniButtonElementEventMap>(type: K, listener: (this: HTMLSereniButtonElement, ev: SereniButtonCustomEvent<HTMLSereniButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSereniButtonElementEventMap>(type: K, listener: (this: HTMLSereniButtonElement, ev: SereniButtonCustomEvent<HTMLSereniButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSereniButtonElement: {
        prototype: HTMLSereniButtonElement;
        new (): HTMLSereniButtonElement;
    };
    interface HTMLSereniTooltipElement extends Components.SereniTooltip, HTMLStencilElement {
    }
    var HTMLSereniTooltipElement: {
        prototype: HTMLSereniTooltipElement;
        new (): HTMLSereniTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sereni-button": HTMLSereniButtonElement;
        "sereni-tooltip": HTMLSereniTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SereniButton {
        "onSereniButtonClick"?: (event: SereniButtonCustomEvent<null>) => void;
    }
    interface SereniTooltip {
        "arrow"?: boolean;
        "position"?: PositionEnum;
        "tooltipBgColor"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-bg-color"?: string;
        "tooltipText"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-text"?: string;
        "tooltipTextColor"?: string;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "tooltip-text-color"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sereni-button": SereniButton;
        "sereni-tooltip": SereniTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sereni-button": LocalJSX.SereniButton & JSXBase.HTMLAttributes<HTMLSereniButtonElement>;
            "sereni-tooltip": LocalJSX.SereniTooltip & JSXBase.HTMLAttributes<HTMLSereniTooltipElement>;
        }
    }
}
